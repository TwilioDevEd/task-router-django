.chapter(data-title='TaskRouter Django')
  .step(data-title='Application Overview', data-file='task_router/urls.py')
    :markdown
      ## Application Overview

      In this tutorial we will show how to automate the routing of calls from
      customers to your support agents. Customers will be able to select a
      product and wait while TaskRouter tries to contact a product
      specialist for the best support experience. If no one is available, our
      application will also save the customer number and selected product,
      allowing us to call later.

      This is what the application does at a high level:

      1. Configure a workspace using the Twilio REST API

      1. Listen for incoming calls, playing a message telling user to select a product

      1. Create a Task from the selected product, asking TaskRouter to handle it

      1. Listen for missed calls and show them for agents to call back

      ---
      **See Also:**
      * [Getting Started with Django](//www.djangoproject.com/start/)
      * [Getting Started with Twilio TaskRouter](//www.twilio.com/docs/quickstart/python/taskrouter)

  .step(data-title='Configuring the Workspace', data-file='task_router/workspace.py',
    data-highlight='14-17,41-97')
    :markdown
      ## Configuring the Workspace

      In order to instruct TaskRouter to handle the Tasks, we need to quickly
      configure a Workspace. This is possible either using the [TaskRouter
      Dashboard](//www.twilio.com/user/account/taskrouter/workspaces) or
      programatically throught [TaskRouter REST API][api-main].

      A [Workspace][workspaces-doc] is the container element for any TaskRouter application. The
      elements are:
      * [Tasks][tasks-doc] - Represents a customer trying to contact an agent
      * [Workers][workers-doc] - The agents responsible for handling Tasks
      * [Task Queues][queues-doc] - Holds Tasks to be consumed by a set of Workers
      * [Workflows][workflows-doc] - Responsible for matching Tasks into Task Queues
      * [Activities][activities-doc] - Possible states of a Worker. Eg: idle, offline, busy

      This application configures a Workspace using the [Python Twilio REST
      API][python-api-doc] through the `configure_workspace` [Django
      Command][django-commands], [check it out here][workspace-command-github].
      For our example application we have created two workers (Bob and Alice)
      and each one of them respond to a specific product.

      ---
      **See Also:**
      * [Django Management Commands][django-commands]
      * [TaskRouter: REST API Reference][api-main]
      * [TaskRouter: Python API Documentation][python-api-doc]
      
      [django-commands]: https://docs.djangoproject.com/en/1.9/howto/custom-management-commands/#
      [python-api-doc]: http://twilio-python.readthedocs.io/en/latest/usage/taskrouter.html
      [workspace-command-github]: https://github.com/TwilioDevEd/task-router-django/blob/master/task_router/management/commands/create_workspace.py
      [api-main]: https://www.twilio.com/docs/api/taskrouter/rest-api
      [workspaces-doc]: https://www.twilio.com/docs/api/taskrouter/workspaces
      [workflows-doc]: https://www.twilio.com/docs/api/taskrouter/workflows 
      [queues-doc]: https://www.twilio.com/docs/api/taskrouter/taskqueues
      [tasks-doc]: https://www.twilio.com/docs/api/taskrouter/tasks
      [workers-doc]: https://www.twilio.com/docs/api/taskrouter/workers
      [activities-doc]: https://www.twilio.com/docs/api/taskrouter/activities

  .step(data-title='Responding To A Twilio Request', data-file='task_router/views.py',
    data-highlight='24-30')
    :markdown
      ## Responding To A Twilio Request

      Right after receiving a call, Twilio will send a request to the
      URL specified on the number's configuration.

      The endpoint will then process the request and generate a TwiML response.
      We'll use the Say verb to give the user product alternatives, and a key
      they can press in order to select one. The Gather verb allows us to
      capture the user's keypress.

      ---
      **See Also:**
      * [Twilio webhooks](//www.twilio.com/platform/webhooks)
      * [TwiML Voice: Your Response](//www.twilio.com/docs/api/twiml/your_response)
      * [TwiML Voice: <Say> verb](//www.twilio.com/docs/api/twiml/say)
      * [TwiML Voice: <Gather> verb](//www.twilio.com/docs/api/twiml/gather)

  .step(data-title='Creating a Task', data-file='task_router/views.py',
    data-highlight='33-41')
    :markdown
      ## Creating a Task

      This is the endpoint set as `action` URL on the `Gather` verb for the
      previous step. It is fired after the user presses a key during the call.
      This request has a `Digits` parameter telling which key was pressed.
      Based on the pressed digit, a `Task` will be created, holding
      `selected_product` as an attribute. The Workflow will take this Task's
      attributes and match with the [configured
      expressions](https://www.twilio.com/docs/api/taskrouter/expression-syntax)
      in order to find an appropriate available Worker.

      We use the [`Enqueue` verb][enqueue-verb] to [integrate with
      TaskRouter][integration-doc]. This integration happens when we specify a
      WorkflowSid on the verb.

      ---
      **See Also:**
      * [TwiML Voice: Twilio's Request](//www.twilio.com/docs/api/twiml/twilio_request)
      * [TwiML Voice: <Gather> callback attributes](//www.twilio.com/docs/api/twiml/gather#attributes-action-parameters)
      * [TwiML Voice: <Enqueue> verb][enqueue-verb]
      * [TaskRouter: Using <Enqueue> to route calls with TaskRouter](//www.twilio.com/docs/api/taskrouter/twiml-integration#using-enqueue-to-route-calls-with-taskrouter)
      [integration-doc]: //www.twilio.com/docs/api/taskrouter/twiml-integration#using-enqueue-to-route-calls-with-taskrouter
      [enqueue-verb]: //www.twilio.com/docs/api/twiml/enqueue

  .step(data-title='Assigning a worker', data-file='task_router/views.py',
    data-highlight='44-49')
    :markdown
      ## Assigning a worker

      When TaskRouter selects a Worker to handle a Task it makes an HTTP
      request to this endpoint, which was configured using the
      [`configure_workspace`][workspace-command-github] Django command. Handling this
      [Assignment Callback][assignment-callback] is a key component of building a TaskRouter
      application. 

      Here, we will [instruct TaskRouter to dequeue][dequeue-section] the call that was
      enqueued on the previous step. We also send a `post_work_activity_sid`
      which will tell TaskRouter which [Activity][activities] to assign this worker after
      the call ends.

      ---
      **See Also:**
      * [Assigning Tasks to Workers: Handling Assignment Callbacks][assignment-callback]
      * [Assigning Tasks to Workers: Dequeue a call from a TwiML queue][dequeue-section]
      * [TaskRouter Quickstart: Understanding Activities](//www.twilio.com/docs/quickstart/python/taskrouter/setup-understanding-activities)

      [workspace-command-github]: https://github.com/TwilioDevEd/task-router-django/blob/master/task_router/management/commands/create_workspace.py
      [assignment-callback]: //www.twilio.com/docs/api/taskrouter/handling-assignment-callbacks
      [dequeue-section]: //www.twilio.com/docs/api/taskrouter/handling-assignment-callbacks#dequeue-call
      [activities]: //www.twilio.com/docs/quickstart/python/taskrouter/setup-understanding-activities

  .step(data-title='Collecting missed calls', data-file='task_router/views.py',
    data-highlight='52-70')
    :markdown
      ## Collecting missed calls

      This endpoint will be called after each [TaskRouter Event][event-types]
      is fired. In our application, we are trying to collect missed calls, so
      it's interesting to pick `workflow.timeout`. This event is triggered when
      the Task waits more than the limit set on Workflow Configuration, which
      happens when no available worker is found after trying out all possible
      Task Queues configured as rules for this Workflow.

      Here we hang up and store it on the database to be able to call this user
      later, but TaskRouter gives us plenty of options. One of them is to
      input another Task to a Task Queue of missed calls, which can wait longer
      until a worker is available to call the customer back.

      Note that we are also listening for `task.canceled`. This is triggered
      when the customer hangs up before being assigned to a worker, cancelling
      the task. Capturing this event allow us to collect also the
      customers that gave up before Workflow timeout.

      ---
      **See Also:**
      * [TaskRouter: Events](//www.twilio.com/docs/api/taskrouter/events)
      * [TaskRouter: Event types][event-types]

      [event-types]: //www.twilio.com/docs/api/taskrouter/events#event-types
